/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.alefzero.padl;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Locale;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class App {
    protected static final Logger logger = LogManager.getLogger();

    public static void main(String[] args) {
		logger.info("Padl is starting");
		// logger.debug("Padl is starting with parameters %s", args);

		String action = args.length > 0 ? args[0] : "help";
		String configurationFilename = getConfigurationFilename(args);
		new App().run(action, configurationFilename);
	}

    private ScheduledFuture<?> executor = null;

    private void run(String action, String configurationFilename) {
        logger.trace(".run [action: {}, configurationFilename: {}]", action, configurationFilename);

        switch (action.toLowerCase()) {
            case "run":
                runSyncProcess(configurationFilename);
                break;
            case "help":
            default:
                this.help();
                break;
        }
    }

    public static String getConfigurationFilename(String[] args) {
        logger.trace(".getConfigurationFilename [args: {}]", Arrays.toString(args));
        String configurationFilename = args.length > 1 ? args[1] : "";
        configurationFilename = configurationFilename.isEmpty() ? "./conf/padlbridge.yaml" : configurationFilename;
        logger.trace(".getConfigurationFilename [return: {}]", configurationFilename);
        return configurationFilename;
    }

    private void help() {
        logger.trace(".help");
        logger.info("""


            Padl - an easy proxy ldap configurator.
            Usage: run.sh config|help|run
            
            """);
    }

    private void runSyncProcess(String configurationFilename) {
        logger.trace(".runSyncProcess [configurationFilename: {}]", configurationFilename);

        Thread shutdownListener = new Thread() {
            public void run() {
                logger.info("Requesting padl processes to stop (10s)...");
                try {
                    if (executor != null) {
                        executor.cancel(false);
                        Thread.sleep(10000);
                    }
                    logger.info("Padl is shutdown.");
                } catch (InterruptedException e) {
                    logger.error("Aborting...");
                }
            }
        };

        Runtime.getRuntime().addShutdownHook(shutdownListener);
        // Thread.sleep(20);
        logger.info("Padl is done.");

    }
}
